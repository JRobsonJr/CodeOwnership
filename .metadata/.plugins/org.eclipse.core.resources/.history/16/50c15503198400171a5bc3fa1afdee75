package main;

import java.io.File;
import java.io.FileDescriptor;
import java.io.FileOutputStream;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.diff.DiffEntry;
import org.eclipse.jgit.diff.DiffEntry.ChangeType;
import org.eclipse.jgit.diff.DiffFormatter;
import org.eclipse.jgit.internal.storage.file.FileRepository;
import org.eclipse.jgit.lib.Config;
import org.eclipse.jgit.lib.Constants;
import org.eclipse.jgit.lib.Ref;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;

import student.StudentController;

public class App {

	StudentController students = new StudentController();
	
	public static void main(String[] args) throws Exception {
		Repository repo = new FileRepository(
				"/home/petcomputacao/Área de Trabalho/David/ProjetoDePesquisa - CodeOwnership/CodeOwnership/ProjetoP2 - Grupo de Rosbon/.git");
		Git git = new Git(repo);
		RevWalk walk = new RevWalk(repo);

		List<Ref> branches = git.branchList().call();

		for (Ref branch : branches) {
			String branchName = branch.getName();

			System.out.println("Commits of branch: " + branchName);
			System.out.println("-------------------------------------");

			Iterable<RevCommit> commits = git.log().all().call();

			for (RevCommit commit : commits) {

				FileOutputStream stdout = new FileOutputStream(FileDescriptor.out);
				DiffFormatter diffFormatter = new DiffFormatter(stdout);
				diffFormatter.setRepository(repo);
				RevCommit diffWith = commit.getParent(0);
				
				System.out.println(commit.getAuthorIdent().getEmailAddress());
				
				for (DiffEntry entry : diffFormatter.scan(diffWith, commit)) {
					String aux = entry.getNewPath();
					if (entry.getChangeType() == ChangeType.ADD && isJavaClass(entry.getNewPath())) {
						System.out.println(entry.getChangeType() + ": " + entry.getNewPath());
					}

				}

				System.out.println("==========*==========");

				boolean foundInThisBranch = foundInThisBranch(repo, walk, branchName, commit);

				if (foundInThisBranch) {
					System.out.println(commit.getName());
					System.out.println(commit.getAuthorIdent().getName());
					System.out.println(commit.getAuthorIdent().getWhen());
					System.out.println(commit.getFullMessage());
				}
			}
		}
	}


	private static boolean isJavaClass(String string) {
		String[] splitted = string.split("\\.");

		if (splitted.length == 2) {
			return splitted[1].equals("java");
		} else {
			return false;
		}
	}

	// public void getCommitsByTree(String treeName) throws
	// RevisionSyntaxException, NoHeadException, MissingObjectException,
	// IncorrectObjectTypeException, AmbiguousObjectException, GitAPIException,
	// IOException {
	//
	//
	//
	//
	// Repository repository = new FileRepository("/home/petcomputacao/Área de
	// Trabalho/David/ProjetoDePesquisa - CodeOwnership/CodeOwnership/ProjetoP2
	// - Grupo de Rosbon/.git");
	//
	// Git git = new Git(repository);
	//
	// Iterable<RevCommit> revCommits = git.log()
	// .add(repository.resolve(treeName))
	// .call();
	// for(RevCommit revCommit : revCommits){
	// System.out.println(revCommit.getName());
	// }
	//
	// }
	//

	//
	public static void main33(String[] args) throws Exception {
		Repository repository = new FileRepositoryBuilder()
				.setGitDir(new File(
						"/home/petcomputacao/Área de Trabalho/David/ProjetoDePesquisa - CodeOwnership/CodeOwnership/ProjetoP2 - Grupo de Rosbon/.git"))
				.build();

		// Here we get the head commit and it's first parent.
		// Adjust to your needs to locate the proper commits.
		RevCommit headCommit = getHeadCommit(repository);
		RevCommit diffWith = headCommit.getParent(0);

		FileOutputStream stdout = new FileOutputStream(FileDescriptor.out);
		DiffFormatter diffFormatter = new DiffFormatter(stdout);
		diffFormatter.setRepository(repository);

		System.out.println(headCommit.getAuthorIdent());
		System.out.println(headCommit.getAuthorIdent().getEmailAddress());
		for (DiffEntry entry : diffFormatter.scan(diffWith, headCommit)) {
			System.out.println(entry.getNewPath());
			System.out.println(entry.getChangeType());
		}

		System.out.println("====");
	}

	private static RevCommit getHeadCommit(Repository repository) throws Exception {
		Git git = new Git(repository);
		Iterable<RevCommit> history = git.log().all().call();
		return history.iterator().next();
	}

	/**
	 * @param args
	 * @throws Exception 
	 */
	public static void main2(String[] args) throws Exception {

		// Open an existing repository
		Repository r = new FileRepositoryBuilder().setGitDir(new File("/tmp/EasyAcceptLab/.git")).build();
		Git git = new Git(r);
		RevWalk walk = new RevWalk(r);

		List<Ref> branches = git.branchList().call();

		for (Ref branch : branches) {
			String branchName = branch.getName();

			System.out.println("Commits of branch: " + branch.getName());
			System.out.println("-------------------------------------");

			Iterable<RevCommit> commits = git.log().all().call();

			for (RevCommit commit : commits) {
				boolean foundInThisBranch = foundInThisBranch(r, walk, branchName, commit);

				if (foundInThisBranch) {
					System.out.println(commit.getName());
					System.out.println(commit.getAuthorIdent().getName());
					System.out.println(new Date(commit.getCommitTime()));
					System.out.println(commit.getFullMessage());
					System.out.println(commit);
				}
			}
			// Config
			Config cfg = r.getConfig();
			String name = cfg.getString("user", null, "name");
			System.out.println(name);
		}
	}
	
	private static boolean foundInThisBranch(Repository repo, RevWalk walk, String branchName, RevCommit commit)
			throws Exception {
		
		boolean foundInThisBranch = false;

		RevCommit targetCommit = walk.parseCommit(repo.resolve(commit.getName()));
		for (Map.Entry<String, Ref> e : repo.getAllRefs().entrySet()) {
			if (e.getKey().startsWith(Constants.R_HEADS)) {
				if (walk.isMergedInto(targetCommit, walk.parseCommit(e.getValue().getObjectId()))) {
					String foundInBranch = e.getValue().getName();
					if (branchName.equals(foundInBranch)) {
						foundInThisBranch = true;
						break;
					}
				}
			}
		}
		return foundInThisBranch;
	}

}